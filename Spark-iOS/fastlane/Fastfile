# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    get_certificates
    get_provisioning_profile
    increment_build_number(xcodeproj: "Spark-iOS.xcodeproj")
    build_app(
      workspace: "Spark-iOS.xcworkspace",
      scheme: "Spark-beta",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
          "com.TeamSparker.Spark" => "Spark AppStore",
          "com.TeamSparker.Spark.SparkNotificationService" => "SparkNotificationService AppStore"
        }
      }
    )
    upload_to_testflight(
      api_key_path: "fastlane/key.json",
      distribute_external: true,
      groups: ["SparkBetaTestGroup"],
      changelog: "- 개발자 QA 중 Level 1 의 spark flake 이미지가 보이지 않아서 수정하였습니다."
    )
    version = get_version_number(
                xcodeproj: "Spark-iOS.xcodeproj",
                target: "Spark-iOS"
              )
    build = get_build_number 
    slack(
      username: "항상건강해야한다콩이",
      icon_url: "https://user-images.githubusercontent.com/69136340/194049016-4b1f747f-99ed-4a14-a28d-2ed9a26fe0e3.png",
      message: "성공적으로 TestFlight 에 등록되었습니다!🔥",
      slack_url: "https://hooks.slack.com/services/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",
      payload: {
	"Version": version + "(" + build + ")"
      }
    )
  end

  desc "Push a new release build to the App Store"
  lane :release do |options|
    if options[:version]
      get_certificates
      get_provisioning_profile
      increment_version_number(version_number: options[:version])
      build_app(workspace: "Spark-iOS.xcworkspace", scheme: "Spark-release")
      upload_to_app_store(
        api_key_path: "fastlane/key.json",
        skip_metadata: false,
        skip_screenshots: true,
        submit_for_review: true,
        automatic_release: false,
        force: true
      )
      version = get_version_number(
                xcodeproj: "Spark-iOS.xcodeproj",
                target: "Spark-iOS"
              )
      build = get_build_number 
      slack(
        username: "항상건강해야한다콩이",
        icon_url: "https://user-images.githubusercontent.com/69136340/194049016-4b1f747f-99ed-4a14-a28d-2ed9a26fe0e3.png",
        message: "성공적으로 앱을 등록했습니다!💫",
        slack_url: "https://hooks.slack.com/services/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",
        payload: {
	  "Version": version + "(" + build + ")"
        }
      )
    end
  end

  error do |lane, exception, options|
    version = get_version_number(
                xcodeproj: "Spark-iOS.xcodeproj",
                target: "Spark-iOS"
              )
    build = get_build_number 
    slack(
      username: "항상건강해야한다콩이",
      icon_url: "https://user-images.githubusercontent.com/69136340/194049016-4b1f747f-99ed-4a14-a28d-2ed9a26fe0e3.png",
      message: "에러 발생!!! 발생!!🚨 : #{exception}",
      success: false,
      slack_url: "https://hooks.slack.com/services/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",
      payload: {
	"Version": version + "(" + build + ")"
      }
    )
  end
end
